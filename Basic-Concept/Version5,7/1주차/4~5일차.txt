※안드로이드 기본 상식
- 새로운 프로젝트를 만들 때 입력하는 패키지 이름은 전 세계에서 만들어지는 앱과 중복되지 않는 유일한 이름일 필요가 있다.

- 스위처라는 것은 윈도우에서 자주 사용하는 Alt + Tab 키 처럼 비슷하며, 사용하는 방법은 Ctrl + Tab 이다.

- 해당하는 클래스의 API를 확인하고 싶다면. 단축키 Ctrl + Q를 누르면 된다.

- 만약 함수 파라메터가 어떤 종류가 있고, 어떻게 넣으면 되는지를 확인하고 싶다면, 괄호안에 커서를 두고 단축키 Ctrl + P를 누르면 된다.

- 만약 코드가 길어지고 파일들이 많아진다면, 검색할 기능이 필요해진다. 그러면 우리는 Edit --> Find --> Find in Path 를 눌러서 검색하면 된다.


※뷰와 뷰의 크기 속성
- XML의 코드에서 <TextView>를 <Button>으로 바꿀수 있는 이유는 버튼이 텍스트 뷰를 상속하여 정의됨으로써 바꿀 수 있다.

- 뷰 중에서 일반적인 컨트롤의 역할을 하는 것을 위젯이라고 부르며, 뷰 그룹 중에서 내부에 뷰들을 포함하고 있으면서 그것들을 배치하는 역할을 
하는 것을 레이아웃이라고 합니다.

- 뷰는 화면의 일정 영역을 차지하기 때문에 모든 뷰는 크기 속성을 필수 값으로 가지고 있어야 합니다. 

- 만약에 뷰의 가로 크기와 세로 크기가 없으면, 안드로이드는 XML 레이아웃이 잘못되었다고 알려준다.

- layout_width, layout_height에서 wrap_content, match_content, 숫자dp 들이 있다.


※제약 레이아웃
- 제약 조건이란 뷰가 레이아웃 안의 다른 요소와 어떻게 연결되는지 알려주는 것으로, 뷰의 연결점과 대상을 연결한다.

- 버튼의 입장에서 자신을 감싸고 있는 레이아웃을 부모 레이아웃이라고 한다.

- 버튼에 보면 4개의 연결점이 있는데, 이것을 핸들이라고 부른다.

- 대상 뷰와 타깃의 연결점으로는 
	1. 위쪽, 아래쪽, 왼쪽, 오른쪽
	2. 가로축의 가운데(CenterX), 세로축의 가운데(CenterY)
	3. 베이스라인 --> 텍스트를 보여주는 뷰인 경우에만 적용됨.

있다. 그리고 왼쪽과 오른쪽을 Start, End라는 단어로 표현하기도 하는데, 이러한 것들은 XML 코드를 직접 변경할 때 필요하므로 기억하는 것이 좋다.

- 가이드라인은 여러 개의 뷰를 일정한 기준 선에 정렬할 때 사용한다.

-  가이드라인의 태그에서 속성인 layout_constraint-Guide_begin이 있는데, 이것은 왼쪽으로부터 얼마나 떨어져 있는 가에 크기가 나오게 된다.


※XML 원본
- 최상위 태그에 보통은 Constraint가 있는데, 그런데 이 앞을 잘보면 android.support.constraint가 보통 붙여져 있다. 그 이유는 안드로이드 SDK에
나중에 추가되어서 외부 라이브러리로 분류되어 있기 때문이다. 또한 외부 라이브러리를 쓸 때도 이와 비슷하게 붙여진다.
또한 가이드라인 클래스도 외부이므로 android.support.constraint.Guideline 으로 쓰인다.

- xmlns:android: 안드로이드 기본 SDK에 포함되어 있는 속성을 사용한다.

- xmlns:app: 프로젝트에서 사용하는 외부 라이브러리에 포함되어 있는 속성을 사용한다.

- xmlns:tools: 안드로이드 스튜디오의 다자이너 도구 등에서 화면에 보여줄 때 사용한다. 이 속성은 앱이 실행될 때 적용되지 않고 안드로이드 스튜디오
에서만 적용된다.

- android:id: 뷰를 구분하는 구분자 역할을 한다. 크게 용도가 두 가지가 있는데,
	1. XML 레이아웃 파일 안에서 뷰를 구분할 때.
	2. XML 레이아웃 파일에서 정의한 뷰를 자바 소스 파일에서 찾을 때.

가 있다. 또한 뷰와 뷰끼리의 연결할 때 XML 원본에서는 layout_constraint[소스 뷰의 연결점]_[타깃 뷰의 연결점]of = "[타깃 뷰의 id]" 이렇게 쓰인다.
타깃 뷰의 id는 보통 "@+id/아이디 값"으로 쓰인다.

- Guideline 태그에서 android:orientation은 가로 또는 세로 방향 중에서 어떤 것을 지정할 것인지에 대한 속성이다.(필수 속성임) ex) "vertical"

- Guideline 태그에서 다음은 부모 레이아웃의 벽면에서 얼마나 떨어뜨린 건지 지정하는 속성이다.
	1. app:layout_constraintGuideline_begin은 세로 방향인 경우 왼쪽부터, 가로 방향인 경우 위쪽으로부터의 거리 지정
	2. app:layout_constraintGuideline_end은 세로 방향인 경우 오른쪽 부터, 가로 방향인 경우 아래쪽으로부터의 거리 지정
	3. app:layout_constraintGuideline_percent는 app:layout_constraintGuideline_begin 속성 대신 지정하되 %단위로 거리 지정

- 제약 조건을 설정하는 속성은 외부 라이브러리의 속성이므로 app이라는 접두사를 사용한다.

- 고정 크기를 지정할 때 숫자를 사용한다. 그러면 그 단위는 다음과 같이 있다.
	1. px:픽셀이며, 화면 픽셀의 수이다.
	2. dp or dip: 밀도 독립적 픽셀이며, 160dpi 기준으로 한 픽셀이다. 예를 들어 1인치에 160개의 점이라면, 1dp는 1px, 320개의 점이라면 
	1dp는 2px이다.
	3. sp or sip: 축척 독립적 픽셀이며, 텍스트 크기를 지정할 때 사용하는 단위이다.
	4. 그외 in(인치), mm(밀리미터), em(텍스트 크기)가 있다.

그래서 텍스트 크기를 지정할 때는 sp or sip, 뷰의 크기를 지정할 때는 dp or dip를 추천한다.


※레이아웃 배경화면
- 레이아웃 안에 배경화면을 넣을 수 있는데, 보통 #ARGB붙여서 background 속성에 값을 넣어준다.
또한 16진수 값으로 여러 가지 포맷을 사용하는데 색상을 기록하는 방법은 다음과 같다.
	1. #RGB
	2. #ARGB
	3. #RRGGBB
	4. #AARRGGBB
ex)
	#ff0000 + 알파 00 = #00ff0000

- 만약 이미지를 배경화면을 두고 싶다면, /res/drawable 폴더에 png라는 이미지를 넣어두고, 나중에 backgroud 속성안에 값을 "@drawable/이름" 을 넣어주면 된다.


※리니어 레이아웃
- 최상위 레이아웃을 LinearLayout으로 바꾸고 싶다면 최하위 태그에서 constraintLayout을 LinearLayou으로 바꿔주면 된다.

- 리니어 레이아웃에 있는 속성 orientation이 vertical에서 horizental로 바뀌었을 때, xml에 있는 디자인이 겹쳐서 보일 때 가 있다. 이러한 이유는
layout_width, layout_height에 잘보면 match_parent와 wrap_content 값이 있는데, 이러한 값의 특징들 때문이다.
	
	1. match_parent: 부모 컨테이너의 남아있는 여유 공간을 모두 채운다.
	2. wrap_content: 뷰에 들어 있는 내용물의 크기에 자동으로 맞춘다.

- 뷰 정렬하기
	1. gravity 속성: 뷰의 내용물을 정렬하는 것이다.
	2. layout_gravity 속성: 부모 레이아웃에서 뷰의 위치를 정렬하는 것이다.