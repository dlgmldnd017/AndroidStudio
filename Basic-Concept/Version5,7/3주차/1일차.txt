※ 네트워킹

- 2-tier C/S 연결방식


	+ 가장 많이 사용하는 네트워킹 방식이며, 대부분 클라이언트가 서버에 연결되어 데이터를 요청하고 응답받는 단순한 개념으로 이해할 수 있다.

	+ 웹 페이지를 볼 때, 사용하는 HTTP 프로토콜, 파일 전송을 위한 FTP 프로토콜 그리고 메일을 주고받는 POP3 프로토콜 등의 연결 방식은 모두 위와 같은 방법으로 서버로 간편하게 접속하여 처리하는 것이다.

	
	+ 클라이언트	-->	서버	(요청)

	+ 서버	-->	클라이언트	(응답)



- 3-tier C/S 연결방식

	
	+ 응용 서버와 데이터 서버로 서버를 구성하면 데이터베이스를 분리 할 수 있어 중간에 비지니스 로직을 처리하는 응용 서버가 좀 더 다양한 역할을 할 수 있다는 장점이 생긴다.
	
	+ 또한 서버를 좀 더 유연하게 구성할 수 있다.

	
- P2P(Peer-to-Peer) 통신


	+ 서버를 두지 않고 단말끼리 서버와 클라이언트 역할을 한다.

	+ 정보 검색이나 파일 송수신으로 정보를 공유하는데 많이 사용이 된다.

	+ 우리가 흔히 사용하는 메신저 서비스나 인터넷 전화에 사용되는 SIP 프로토콜 기반의 서비스들은 서버가 있긴 하지만 P2P 모델을 가지고 있다.

	
	Q) SIP(Session Initiation Protocol)란?

	A) IETF에서 정의한 시그널링 프로토콜로, 음성과 화상통화 같은 멀티미디어 세션을 제어하기 위해 널리 사용되고 있다.



※ 소켓 사용하기

- TCP와 UDP 방식

	+ 네트워킹을 이해할려면 TCP/IP 수준의 통신 방식을 제공하는 소켓이 무엇인지 알아야 한다.

	+ IP 주소로 목적지 호스트를 찾아내고 포트로 통신 접속점을 찾아내는 소켓 연결은 TCP와 UDP 방식으로 나눌 수 있다.

	+ 하지만, 일반적인 프로그래밍에서는 대부분 TCP 연결을 사용한다.


	Q) UDP 기반 소켓은 어디에 많이 사용할까요?

	A) 인터넷 전화에 많이 사용되는 SIP 프로토콜이나 멀티미디어 데이터 스트림을 처리하는 RTP 프로토콜은 기본적으로 UDP를 많이 사용한다.


- HTTP 프로토콜과 소켓

	+ HTTP 프로토콜은 소켓으로 웹 서버에 연결한 후에 요청을 전송하고 응답을 받은 다음 연결을 끊는다. 이러한 특징을 '비연결성(Stateless)'라고 부른다.

	+ 옛날에는 비연결성은 실시간으로 데이터를 처리하는 앱은 응답 속도를 높이기 위해서 연결성이 있는 소켓을 선호하였다.

	+ 하지만 현재는 인터넷의 속도가 빨라져 HTTP 프로토콜을 사용하는 웹이 일반적이 되었다.


	+ 안드로이드는 표준 자바에서 사용하던 java.net 패키지의 클래스들을 그대로 사용함으로써, 소켓 연결이 매우 쉽게 구현할 수 있게 되었다.

	+ 안드로이드는 소켓 연결 등을 시도하거나 응답을 받아 처리할 때 스레드를 사용해야 한다는 것이다. 그래서 안드로이드는 스레드 없이 네트워킹 기능을 사용할 수가 없다.(강제 사항★★★)

